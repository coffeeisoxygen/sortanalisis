@startuml MergedSorts

title Sorting Algorithms

actor User
participant "BubbleSort" as BubbleSort
participant "HeapSort" as HeapSort
participant "MergeSort" as MergeSort
participant "QuickSort" as QuickSort
participant "Array" as Array

User -> BubbleSort: sort(array)
activate BubbleSort
BubbleSort -> Array: n = array.length
BubbleSort -> Array: swapped = true
alt while swapped == true
    BubbleSort -> Array: swapped = false
    loop for i = 1 to n - 1
        alt if array[i - 1] > array[i]
            BubbleSort -> Array: swap(array[i - 1], array[i])
            BubbleSort -> Array: swapped = true
        end
    end
end
BubbleSort -> User: return sorted array
deactivate BubbleSort

User -> HeapSort: sort(array)
activate HeapSort
HeapSort -> Array: n = array.length
loop build heap
    HeapSort -> Array: heapify(array, n, i) for i = n/2 - 1 to 0
end
loop sort array
    HeapSort -> Array: swap(array[0], array[i])
    HeapSort -> Array: heapify(array, i, 0)
end
HeapSort -> User: return sorted array
deactivate HeapSort

User -> MergeSort: sort(array)
activate MergeSort
MergeSort -> Array: left = 0, right = array.length - 1
MergeSort -> MergeSort: mergeSort(array, left, right)
loop if left < right
    MergeSort -> Array: mid = (left + right) / 2
    MergeSort -> MergeSort: mergeSort(array, left, mid)
    MergeSort -> MergeSort: mergeSort(array, mid + 1, right)
    MergeSort -> MergeSort: merge(array, left, mid, right)
end
MergeSort -> User: return sorted array
deactivate MergeSort

User -> QuickSort: sort(array)
activate QuickSort
QuickSort -> Array: low = 0, high = array.length - 1
QuickSort -> QuickSort: quickSort(array, low, high)
loop if low < high
    QuickSort -> QuickSort: pi = partition(array, low, high)
    QuickSort -> QuickSort: quickSort(array, low, pi - 1)
    QuickSort -> QuickSort: quickSort(array, pi + 1, high)
end
QuickSort -> User: return sorted array
deactivate QuickSort

@enduml